// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/llm_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LLMService_ChatCompletionStream_FullMethodName = "/llm_gateway.LLMService/ChatCompletionStream"
	LLMService_ChatCompletion_FullMethodName       = "/llm_gateway.LLMService/ChatCompletion"
)

// LLMServiceClient is the client API for LLMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LLMServiceClient interface {
	// Stream chat completions for interactive conversation
	ChatCompletionStream(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (LLMService_ChatCompletionStreamClient, error)
	// Get a complete response in one call
	ChatCompletion(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error)
}

type lLMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMServiceClient(cc grpc.ClientConnInterface) LLMServiceClient {
	return &lLMServiceClient{cc}
}

func (c *lLMServiceClient) ChatCompletionStream(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (LLMService_ChatCompletionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &LLMService_ServiceDesc.Streams[0], LLMService_ChatCompletionStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lLMServiceChatCompletionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LLMService_ChatCompletionStreamClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type lLMServiceChatCompletionStreamClient struct {
	grpc.ClientStream
}

func (x *lLMServiceChatCompletionStreamClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lLMServiceClient) ChatCompletion(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error) {
	out := new(ChatCompletionResponse)
	err := c.cc.Invoke(ctx, LLMService_ChatCompletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMServiceServer is the server API for LLMService service.
// All implementations must embed UnimplementedLLMServiceServer
// for forward compatibility
type LLMServiceServer interface {
	// Stream chat completions for interactive conversation
	ChatCompletionStream(*ChatRequest, LLMService_ChatCompletionStreamServer) error
	// Get a complete response in one call
	ChatCompletion(context.Context, *ChatRequest) (*ChatCompletionResponse, error)
	mustEmbedUnimplementedLLMServiceServer()
}

// UnimplementedLLMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLLMServiceServer struct {
}

func (UnimplementedLLMServiceServer) ChatCompletionStream(*ChatRequest, LLMService_ChatCompletionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletionStream not implemented")
}
func (UnimplementedLLMServiceServer) ChatCompletion(context.Context, *ChatRequest) (*ChatCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletion not implemented")
}
func (UnimplementedLLMServiceServer) mustEmbedUnimplementedLLMServiceServer() {}

// UnsafeLLMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMServiceServer will
// result in compilation errors.
type UnsafeLLMServiceServer interface {
	mustEmbedUnimplementedLLMServiceServer()
}

func RegisterLLMServiceServer(s grpc.ServiceRegistrar, srv LLMServiceServer) {
	s.RegisterService(&LLMService_ServiceDesc, srv)
}

func _LLMService_ChatCompletionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMServiceServer).ChatCompletionStream(m, &lLMServiceChatCompletionStreamServer{stream})
}

type LLMService_ChatCompletionStreamServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type lLMServiceChatCompletionStreamServer struct {
	grpc.ServerStream
}

func (x *lLMServiceChatCompletionStreamServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LLMService_ChatCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).ChatCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_ChatCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).ChatCompletion(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMService_ServiceDesc is the grpc.ServiceDesc for LLMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llm_gateway.LLMService",
	HandlerType: (*LLMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatCompletion",
			Handler:    _LLMService_ChatCompletion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompletionStream",
			Handler:       _LLMService_ChatCompletionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/llm_service.proto",
}
