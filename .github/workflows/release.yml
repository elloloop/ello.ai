name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

# Prevents concurrent releases
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: "stable"
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Generate protobuf files
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build web app
        run: flutter build web --release --base-href "/ello.ai/"

      - name: Create web archive
        run: |
          cd build/web
          tar -czf ../../ello-ai-web-${{ github.ref_name }}.tar.gz *

      - name: Upload web artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: ello-ai-web-${{ github.ref_name }}.tar.gz
          retention-days: 30

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config libgtk-3-dev \
            liblzma-dev libstdc++-12-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: "stable"
          cache: true

      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Generate protobuf files
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build Linux app
        run: flutter build linux --release

      - name: Create Linux archive
        run: |
          cd build/linux/x64/release
          tar -czf ../../../../ello-ai-linux-${{ github.ref_name }}.tar.gz bundle/

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: ello-ai-linux-${{ github.ref_name }}.tar.gz
          retention-days: 30

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: "stable"
          cache: true

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Generate protobuf files
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build Windows app
        run: flutter build windows --release

      - name: Create Windows archive
        run: |
          cd build/windows/runner/Release
          7z a ../../../../ello-ai-windows-${{ github.ref_name }}.zip *

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ello-ai-windows-${{ github.ref_name }}.zip
          retention-days: 30

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: "stable"
          cache: true

      - name: Enable macOS desktop
        run: flutter config --enable-macos-desktop

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Generate protobuf files
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build macOS app
        run: flutter build macos --release

      - name: Create macOS DMG
        run: |
          # Install create-dmg for better DMG creation
          brew install create-dmg
          
          # Create DMG
          create-dmg \
            --volname "ello.AI" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "ello_ai.app" 175 120 \
            --hide-extension "ello_ai.app" \
            --app-drop-link 425 120 \
            "ello-ai-macos-${{ github.ref_name }}.dmg" \
            "build/macos/Build/Products/Release/"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: ello-ai-macos-${{ github.ref_name }}.dmg
          retention-days: 30

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-web, build-linux, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate checksums
        run: |
          echo "# Release Checksums" > checksums.txt
          echo "" >> checksums.txt
          for file in *-build/*; do
            if [ -f "$file" ]; then
              echo "## $(basename "$file")" >> checksums.txt
              echo '```' >> checksums.txt
              sha256sum "$file" >> checksums.txt
              echo '```' >> checksums.txt
              echo "" >> checksums.txt
            fi
          done

      - name: Extract release notes
        id: release_notes
        run: |
          # Extract release notes from CHANGELOG.md for this version
          VERSION=${{ github.ref_name }}
          if [ -f "CHANGELOG.md" ]; then
            # Extract the section for this version
            awk "/^## \[${VERSION#v}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
            
            # If no specific section found, use the latest section
            if [ ! -s release_notes.md ]; then
              awk '/^## \[/{if(first_section) exit; first_section=1} first_section' CHANGELOG.md > release_notes.md
            fi
          else
            echo "Release ${{ github.ref_name }}" > release_notes.md
            echo "" >> release_notes.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for detailed release notes." >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ello.AI ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            web-build/ello-ai-web-${{ github.ref_name }}.tar.gz
            linux-build/ello-ai-linux-${{ github.ref_name }}.tar.gz
            windows-build/ello-ai-windows-${{ github.ref_name }}.zip
            macos-build/ello-ai-macos-${{ github.ref_name }}.dmg
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    needs: [build-web]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://ello.ai

    steps:
      - name: Download web artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build

      - name: Extract web files
        run: |
          mkdir web-deploy
          tar -xzf ello-ai-web-${{ github.ref_name }}.tar.gz -C web-deploy/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./web-deploy
          cname: ello.ai