name: Build and Release Desktop Apps

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

# Prevents concurrent releases
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  FLUTTER_VERSION: "3.22.0"

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_release: ${{ steps.version.outputs.is_release }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep "version:" pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "tag=v$VERSION-dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

  build-macos:
    name: Build macOS DMG
    runs-on: macos-latest
    needs: prepare
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Generate protobuf files
        run: flutter pub run build_runner build --delete-conflicting-outputs
      
      - name: Build Flutter app for macOS
        run: flutter build macos --release
      
      - name: Import Code-Signing Certificates
        if: env.MACOS_CERTIFICATE_BASE64 != ''
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        env:
          MACOS_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
      
      - name: Create DMG
        run: |
          # Install create-dmg for better DMG creation
          brew install create-dmg
          
          # Build DMG with signing if certificate is available
          if [ -n "${{ secrets.MACOS_CERTIFICATE_BASE64 }}" ]; then
            ./scripts/build-macos-dmg.sh --sign "Developer ID Application"
          else
            ./scripts/build-macos-dmg.sh
          fi
        env:
          APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      
      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: build/ello.AI-*.dmg
          retention-days: 30

  build-windows:
    name: Build Windows MSIX
    runs-on: windows-latest
    needs: prepare
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Generate protobuf files
        run: flutter pub run build_runner build --delete-conflicting-outputs
      
      - name: Build Flutter app for Windows
        run: flutter build windows --release
      
      - name: Decode Certificate
        if: env.WINDOWS_CERTIFICATE_BASE64 != ''
        run: |
          $cert = [Convert]::FromBase64String("${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}")
          [IO.File]::WriteAllBytes("certificate.pfx", $cert)
        env:
          WINDOWS_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}
      
      - name: Create MSIX package
        run: |
          # Set environment variables for certificate if available
          if (Test-Path "certificate.pfx") {
            $env:WINDOWS_CERTIFICATE_PATH = "certificate.pfx"
            $env:WINDOWS_CERTIFICATE_PASSWORD = "${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}"
            bash ./scripts/build-windows-msix.sh --sign
          } else {
            bash ./scripts/build-windows-msix.sh
          }
      
      - name: Clean up certificate
        if: always()
        run: |
          if (Test-Path "certificate.pfx") {
            Remove-Item "certificate.pfx" -Force
          }
      
      - name: Upload Windows MSIX
        uses: actions/upload-artifact@v4
        with:
          name: windows-msix
          path: build/ello.AI-*.msix
          retention-days: 30

  build-linux:
    name: Build Linux AppImage
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev fuse libfuse2
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Generate protobuf files
        run: flutter pub run build_runner build --delete-conflicting-outputs
      
      - name: Build Flutter app for Linux
        run: flutter build linux --release
      
      - name: Create AppImage
        run: |
          # Build AppImage with signing if GPG key is available
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            ./scripts/build-linux-appimage.sh --sign
          else
            ./scripts/build-linux-appimage.sh
          fi
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: |
            build/ello.AI-*.AppImage
            build/ello.AI-*.AppImage.asc
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build-macos, build-windows, build-linux]
    if: always() && (needs.build-macos.result == 'success' || needs.build-windows.result == 'success' || needs.build-linux.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Copy artifacts to release directory
          find artifacts -type f \( -name "*.dmg" -o -name "*.msix" -o -name "*.AppImage" -o -name "*.asc" \) \
            -exec cp {} release-files/ \;
          
          # List files for verification
          echo "Release files:"
          ls -la release-files/
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          ## ello.AI v${{ needs.prepare.outputs.version }}
          
          ### Changes
          $CHANGELOG
          
          ### Download
          - **macOS**: Download the \`.dmg\` file for Intel and Apple Silicon Macs
          - **Windows**: Download the \`.msix\` file for Windows 10+ (requires enabling sideloading)
          - **Linux**: Download the \`.AppImage\` file for most Linux distributions
          
          ### Installation Notes
          - **macOS**: Mount the DMG and drag ello.AI to Applications folder
          - **Windows**: Right-click the MSIX file and select "Install" or use \`Add-AppxPackage\`
          - **Linux**: Make the AppImage executable (\`chmod +x\`) and run directly
          
          ### Code Signing
          - macOS DMG is signed and notarized (if built with certificates)
          - Windows MSIX is signed (if built with certificates)
          - Linux AppImage includes GPG signature (if built with GPG key)
          EOF
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: "ello.AI v${{ needs.prepare.outputs.version }}"
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: ${{ needs.prepare.outputs.is_release == 'false' }}
          files: release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.prepare.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ needs.prepare.outputs.is_release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $(ls release-files/ | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          for file in release-files/*; do
            echo "- $(basename "$file") ($(du -h "$file" | cut -f1))" >> $GITHUB_STEP_SUMMARY
          done